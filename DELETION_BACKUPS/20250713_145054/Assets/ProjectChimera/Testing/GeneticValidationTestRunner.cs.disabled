using UnityEngine;
using UnityEngine.TestTools;
using NUnit.Framework;
using ProjectChimera.Core;
using ProjectChimera.Data.Genetics;
using ProjectChimera.Systems.Genetics;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System;

namespace ProjectChimera.Testing
{
    /// <summary>
    /// Phase 3.4: Specialized test runner for genetic system validation.
    /// Focuses on scientific accuracy, inheritance patterns, and breeding algorithms.
    /// </summary>
    public class GeneticValidationTestRunner : MonoBehaviour
    {
        [Header("Validation Configuration")]
        [SerializeField] private bool _validateMendelianRatios = true;
        [SerializeField] private bool _validateTraitExpression = true;
        [SerializeField] private bool _validateBreedingAccuracy = true;
        [SerializeField] private bool _validatePerformance = true;
        
        [Header("Scientific Parameters")]
        [SerializeField] private int _statisticalSampleSize = 1000;
        [SerializeField] private float _acceptableDeviation = 0.1f; // 10% deviation from expected
        [SerializeField] private float _performanceThreshold = 60f; // Minimum FPS
        
        [Header("Test Assets")]
        [SerializeField] private List<PlantStrainSO> _controlStrains = new List<PlantStrainSO>();
        [SerializeField] private List<GeneDefinitionSO> _testGenes = new List<GeneDefinitionSO>();
        
        [Header("Results Display")]
        [SerializeField] private GeneticValidationResults _validationResults;
        [SerializeField] private bool _logDetailedResults = true;
        [SerializeField] private bool _generateReport = true;
        
        // System references
        private GeneticsManager _geneticsManager;
        private BreedingSimulator _breedingSimulator;
        private ProjectChimera.Systems.Genetics.TraitExpressionEngine _traitEngine;
        
        // Validation tracking
        private List<ValidationTest> _completedTests = new List<ValidationTest>();
        private Dictionary<string, float> _scientificMetrics = new Dictionary<string, float>();
        
        private void Start()
        {
            InitializeValidation();
            StartCoroutine(RunGeneticValidation());
        }
        
        /// <summary>
        /// Initialize the validation system.
        /// </summary>
        private void InitializeValidation()
        {
            // Find required systems
            _geneticsManager = FindObjectOfType<GeneticsManager>();
            
            // Initialize dependencies directly instead of FindObjectOfType
            _breedingSimulator = new ProjectChimera.Systems.Genetics.BreedingSimulator(true, 0.1f);
            _traitEngine = new ProjectChimera.Systems.Genetics.TraitExpressionEngine(true, true);
            
            // Initialize results
            _validationResults = new GeneticValidationResults();
            _validationResults.ValidationStartTime = DateTime.Now;
            
            // Load test assets if needed
            LoadValidationAssets();
            
            Debug.Log("🔬 Genetic Validation Test Runner initialized");
        }
        
        /// <summary>
        /// Load validation assets from resources.
        /// </summary>
        private void LoadValidationAssets()
        {
            if (_controlStrains.Count == 0)
            {
                var strains = Resources.LoadAll<PlantStrainSO>("Genetics/Strains");
                _controlStrains.AddRange(strains.Take(5)); // Use first 5 as controls
            }
            
            if (_testGenes.Count == 0)
            {
                var genes = Resources.LoadAll<GeneDefinitionSO>("Genetics/Genes");
                _testGenes.AddRange(genes.Take(10)); // Use first 10 for testing
            }
            
            Debug.Log($"📚 Loaded {_controlStrains.Count} control strains and {_testGenes.Count} test genes");
        }
        
        /// <summary>
        /// Run the complete genetic validation suite.
        /// </summary>
        [UnityTest]
        public IEnumerator RunGeneticValidation()
        {
            Debug.Log("🧬 Starting Genetic Validation Suite");
            
            // Phase 1: Mendelian Inheritance Validation
            if (_validateMendelianRatios)
            {
                yield return StartCoroutine(ValidateMendelianInheritance());
            }
            
            // Phase 2: Trait Expression Validation
            if (_validateTraitExpression)
            {
                yield return StartCoroutine(ValidateTraitExpression());
            }
            
            // Phase 3: Breeding Algorithm Validation
            if (_validateBreedingAccuracy)
            {
                yield return StartCoroutine(ValidateBreedingAlgorithms());
            }
            
            // Phase 4: Performance Validation
            if (_validatePerformance)
            {
                yield return StartCoroutine(ValidatePerformance());
            }
            
            // Phase 5: Scientific Accuracy Assessment
            yield return StartCoroutine(AssessScientificAccuracy());
            
            // Generate final validation report
            _validationResults.ValidationEndTime = DateTime.Now;
            if (_generateReport)
            {
                GenerateValidationReport();
            }
            
            Debug.Log($"✅ Genetic Validation Complete: {_validationResults.PassedTests}/{_validationResults.TotalTests} tests passed");
        }
        
        /// <summary>
        /// Validate Mendelian inheritance patterns.
        /// </summary>
        [UnityTest]
        public IEnumerator ValidateMendelianInheritance()
        {
            Debug.Log("📊 Validating Mendelian Inheritance Patterns");
            
            var validation = new ValidationTest("Mendelian Inheritance Ratios");
            
            try
            {
                if (_controlStrains.Count < 2 || _breedingSimulator == null)
                {
                    validation.Result = ValidationResult.Failed;
                    validation.Details = "Insufficient control strains or breeding simulator unavailable";
                    RecordValidation(validation);
                    yield break;
                }
                
                // Test classic 3:1 dominant:recessive ratio
                var dominantParent = _controlStrains[0];
                var recessiveParent = _controlStrains[1];
                
                var offspring = new List<CannabisGenotype>();
                var dominantCount = 0;
                var recessiveCount = 0;
                
                // Generate large sample for statistical significance
                for (int i = 0; i < _statisticalSampleSize; i++)
                {
                    var child = _breedingSimulator.SimulateOffspringGenotype(dominantParent, recessiveParent);
                    if (child != null)
                    {
                        offspring.Add(child);
                        
                        // Determine dominant vs recessive expression
                        if (HasDominantExpression(child, PlantTrait.THCContent))
                        {
                            dominantCount++;
                        }
                        else
                        {
                            recessiveCount++;
                        }
                    }
                }
                
                // Calculate actual ratio
                var totalOffspring = dominantCount + recessiveCount;
                var dominantRatio = totalOffspring > 0 ? (float)dominantCount / totalOffspring : 0f;
                var expectedRatio = 0.75f; // Expected 3:1 ratio
                var deviation = Mathf.Abs(dominantRatio - expectedRatio);
                
                // Validate ratio is within acceptable range
                validation.Result = deviation <= _acceptableDeviation ? ValidationResult.Passed : ValidationResult.Failed;
                validation.Details = $"Dominant ratio: {dominantRatio:P1} (expected: {expectedRatio:P1}), deviation: {deviation:P1}";
                validation.ScientificAccuracy = 1f - (deviation / expectedRatio);
                
                _scientificMetrics["MendelianAccuracy"] = validation.ScientificAccuracy;
                
                if (_logDetailedResults)
                {
                    Debug.Log($"🧬 Mendelian Validation: {dominantCount} dominant, {recessiveCount} recessive from {totalOffspring} offspring");
                }
            }
            catch (Exception e)
            {
                validation.Result = ValidationResult.Error;
                validation.Details = $"Exception during Mendelian validation: {e.Message}";
            }
            
            RecordValidation(validation);
            
            // Yield periodically during the loop - moved outside try block
            for (int i = 0; i < _statisticalSampleSize; i += 100)
            {
                yield return new WaitForEndOfFrame();
            }
        }
        
        /// <summary>
        /// Validate trait expression accuracy.
        /// </summary>
        [UnityTest]
        public IEnumerator ValidateTraitExpression()
        {
            Debug.Log("📈 Validating Trait Expression Accuracy");
            
            var validation = new ValidationTest("Trait Expression Consistency");
            
            try
            {
                if (_traitEngine == null || _controlStrains.Count == 0)
                {
                    validation.Result = ValidationResult.Failed;
                    validation.Details = "Trait engine or control strains unavailable";
                    RecordValidation(validation);
                    yield break;
                }
                
                var expressionConsistency = new List<float>();
                var testStrain = _controlStrains[0];
                var conditions = ProjectChimera.Data.Cultivation.EnvironmentalConditions.CreateIndoorDefault();
                
                // Test expression consistency across multiple evaluations
                var referenceExpression = GetTraitExpression(testStrain, conditions);
                
                for (int i = 0; i < 100; i++)
                {
                    var currentExpression = GetTraitExpression(testStrain, conditions);
                    
                    // Calculate consistency score
                    var thcConsistency = 1f - Mathf.Abs(currentExpression.THCExpression - referenceExpression.THCExpression);
                    var cbdConsistency = 1f - Mathf.Abs(currentExpression.CBDExpression - referenceExpression.CBDExpression);
                    var yieldConsistency = 1f - Mathf.Abs(currentExpression.YieldExpression - referenceExpression.YieldExpression);
                    
                    var avgConsistency = (thcConsistency + cbdConsistency + yieldConsistency) / 3f;
                    expressionConsistency.Add(avgConsistency);
                }
                
                var overallConsistency = expressionConsistency.Average();
                validation.Result = overallConsistency >= 0.95f ? ValidationResult.Passed : ValidationResult.Failed;
                validation.Details = $"Expression consistency: {overallConsistency:P1}";
                validation.ScientificAccuracy = overallConsistency;
                
                _scientificMetrics["ExpressionConsistency"] = overallConsistency;
            }
            catch (Exception e)
            {
                validation.Result = ValidationResult.Error;
                validation.Details = $"Exception during trait expression validation: {e.Message}";
            }
            
            // Test environmental response - moved outside try block
            yield return StartCoroutine(ValidateEnvironmentalResponse(validation));
            
            RecordValidation(validation);
            
            // Yield periodically during the loop - moved outside try block
            for (int i = 0; i < 100; i += 10)
            {
                yield return new WaitForEndOfFrame();
            }
        }
        
        /// <summary>
        /// Validate environmental response accuracy.
        /// </summary>
        [UnityTest]
        public IEnumerator ValidateEnvironmentalResponse(ValidationTest parentValidation)
        {
            if (_traitEngine == null || _controlStrains.Count == 0) yield break;
            
            var testStrain = _controlStrains[0];
            
            // Test different environmental conditions
            var optimalConditions = ProjectChimera.Data.Cultivation.EnvironmentalConditions.CreateIndoorDefault();
            var stressConditions = ProjectChimera.Data.Cultivation.EnvironmentalConditions.CreateIndoorDefault();
            
            // Modify stress conditions
            stressConditions.Temperature += 10f; // Heat stress
            stressConditions.Humidity -= 20f; // Humidity stress
            
            var optimalExpression = GetTraitExpression(testStrain, optimalConditions);
            var stressExpression = GetTraitExpression(testStrain, stressConditions);
            
            // Validate that stress conditions reduce expression
            var stressImpact = (optimalExpression.YieldExpression - stressExpression.YieldExpression) / optimalExpression.YieldExpression;
            
            var environmentalResponseValid = stressImpact > 0.05f && stressImpact < 0.5f; // 5-50% reduction
            
            if (environmentalResponseValid)
            {
                parentValidation.Details += $", Environmental response: {stressImpact:P1} reduction under stress";
            }
            else
            {
                parentValidation.Details += $", Environmental response INVALID: {stressImpact:P1} reduction";
                parentValidation.Result = ValidationResult.Failed;
            }
            
            _scientificMetrics["EnvironmentalResponse"] = stressImpact;
            
            yield return new WaitForEndOfFrame();
        }
        
        /// <summary>
        /// Validate breeding algorithm accuracy.
        /// </summary>
        [UnityTest]
        public IEnumerator ValidateBreedingAlgorithms()
        {
            Debug.Log("💕 Validating Breeding Algorithm Accuracy");
            
            var validation = new ValidationTest("Breeding Algorithm Validation");
            bool shouldBreak = false;
            
            try
            {
                if (_breedingSimulator == null || _controlStrains.Count < 2)
                {
                    validation.Result = ValidationResult.Failed;
                    validation.Details = "Breeding simulator or control strains unavailable";
                    RecordValidation(validation);
                    shouldBreak = true;
                }
                else
                {
                    var parent1 = _controlStrains[0];
                    var parent2 = _controlStrains[1];
                    
                    // Test breeding compatibility analysis
                    var compatibility = _breedingSimulator.AnalyzeBreedingCompatibility(parent1, parent2);
                    
                    bool compatibilityValid = compatibility != null &&
                                            compatibility.GeneticDistance >= 0f && compatibility.GeneticDistance <= 1f &&
                                            compatibility.InbreedingRisk >= 0f && compatibility.InbreedingRisk <= 1f &&
                                            compatibility.ExpectedHeterosis >= 0f;
                    
                    // Test offspring generation consistency
                    var offspringGenerated = 0;
                    for (int i = 0; i < 100; i++)
                    {
                        var offspring = _breedingSimulator.SimulateOffspringGenotype(parent1, parent2);
                        if (offspring != null)
                        {
                            offspringGenerated++;
                        }
                    }
                    
                    var generationSuccessRate = offspringGenerated / 100f;
                    bool generationValid = generationSuccessRate >= 0.9f; // 90% success rate
                    
                    validation.Result = compatibilityValid && generationValid ? ValidationResult.Passed : ValidationResult.Failed;
                    validation.Details = $"Compatibility valid: {compatibilityValid}, Generation rate: {generationSuccessRate:P1}";
                    validation.ScientificAccuracy = generationSuccessRate;
                    
                    _scientificMetrics["BreedingAccuracy"] = generationSuccessRate;
                    
                    if (compatibility != null)
                    {
                        validation.Details += $", Genetic distance: {compatibility.GeneticDistance:F3}";
                    }
                }
            }
            catch (Exception e)
            {
                validation.Result = ValidationResult.Error;
                validation.Details = $"Exception during breeding validation: {e.Message}";
            }
            
            // Handle early exit outside try-catch block
            if (shouldBreak)
            {
                yield break;
            }
            
            RecordValidation(validation);
            
            // Yield periodically during the loop - moved outside try block
            for (int i = 0; i < 100; i += 10)
            {
                yield return new WaitForEndOfFrame();
            }
        }
        
        /// <summary>
        /// Validate system performance.
        /// </summary>
        [UnityTest]
        public IEnumerator ValidatePerformance()
        {
            Debug.Log("⚡ Validating Genetic System Performance");
            
            var validation = new ValidationTest("Performance Validation");
            var frameRates = new List<float>();
            
            try
            {
                var initialFrameRate = 1f / Time.deltaTime;
                
                // Perform intensive genetic operations while monitoring frame rate
                for (int i = 0; i < 300; i++) // 5 seconds at 60 FPS
                {
                    // Perform genetic operations
                    if (_controlStrains.Count >= 2 && _breedingSimulator != null)
                    {
                        var offspring = _breedingSimulator.SimulateOffspringGenotype(_controlStrains[0], _controlStrains[1]);
                        
                        if (_traitEngine != null && offspring != null)
                        {
                            var conditions = ProjectChimera.Data.Cultivation.EnvironmentalConditions.CreateIndoorDefault();
                            var expression = _traitEngine.CalculateTraitExpression(offspring, conditions);
                        }
                    }
                    
                    frameRates.Add(1f / Time.deltaTime);
                    // Yield moved outside try block - will be handled after try-catch
                }
                
                var averageFrameRate = frameRates.Average();
                var minimumFrameRate = frameRates.Min();
                var frameRateStability = 1f - (frameRates.Max() - frameRates.Min()) / frameRates.Max();
                
                bool performanceValid = averageFrameRate >= _performanceThreshold && minimumFrameRate >= _performanceThreshold * 0.8f;
                
                validation.Result = performanceValid ? ValidationResult.Passed : ValidationResult.Failed;
                validation.Details = $"Avg FPS: {averageFrameRate:F1}, Min FPS: {minimumFrameRate:F1}, Stability: {frameRateStability:P1}";
                validation.ScientificAccuracy = Mathf.Clamp01(averageFrameRate / _performanceThreshold);
                
                _scientificMetrics["PerformanceFPS"] = averageFrameRate;
                _scientificMetrics["PerformanceStability"] = frameRateStability;
            }
            catch (Exception e)
            {
                validation.Result = ValidationResult.Error;
                validation.Details = $"Exception during performance validation: {e.Message}";
            }
            
            RecordValidation(validation);
            
            // Yield after each frame during performance testing - moved outside try block
            for (int i = 0; i < 300; i++)
            {
                yield return new WaitForEndOfFrame();
            }
        }
        
        /// <summary>
        /// Assess overall scientific accuracy.
        /// </summary>
        [UnityTest]
        public IEnumerator AssessScientificAccuracy()
        {
            Debug.Log("🔬 Assessing Overall Scientific Accuracy");
            
            var validation = new ValidationTest("Scientific Accuracy Assessment");
            
            try
            {
                var accuracyScores = _completedTests
                    .Where(t => t.ScientificAccuracy > 0f)
                    .Select(t => t.ScientificAccuracy)
                    .ToList();
                
                if (accuracyScores.Count > 0)
                {
                    var overallAccuracy = accuracyScores.Average();
                    var accuracyConsistency = 1f - accuracyScores.Select(s => Mathf.Abs(s - overallAccuracy)).Average();
                    
                    validation.Result = overallAccuracy >= 0.8f ? ValidationResult.Passed : ValidationResult.Failed;
                    validation.Details = $"Overall accuracy: {overallAccuracy:P1}, Consistency: {accuracyConsistency:P1}";
                    validation.ScientificAccuracy = overallAccuracy;
                    
                    _scientificMetrics["OverallAccuracy"] = overallAccuracy;
                    _scientificMetrics["AccuracyConsistency"] = accuracyConsistency;
                    
                    // Generate scientific accuracy report
                    _validationResults.ScientificAccuracyScore = overallAccuracy;
                    _validationResults.AccuracyConsistency = accuracyConsistency;
                }
                else
                {
                    validation.Result = ValidationResult.Failed;
                    validation.Details = "No accuracy scores available for assessment";
                }
            }
            catch (Exception e)
            {
                validation.Result = ValidationResult.Error;
                validation.Details = $"Exception during scientific accuracy assessment: {e.Message}";
            }
            
            RecordValidation(validation);
            yield return new WaitForEndOfFrame();
        }
        
        /// <summary>
        /// Get trait expression for a strain under specific conditions.
        /// </summary>
        private ProjectChimera.Systems.Genetics.TraitExpressionResult GetTraitExpression(PlantStrainSO strain, ProjectChimera.Data.Cultivation.EnvironmentalConditions conditions)
        {
            if (_traitEngine == null) return new ProjectChimera.Systems.Genetics.TraitExpressionResult();
            
            // Create a test genotype from the strain
            var genotype = CreateTestGenotype(strain);
            return _traitEngine.CalculateTraitExpression(genotype, conditions);
        }
        
        /// <summary>
        /// Check if genotype shows dominant expression for a trait.
        /// </summary>
        private bool HasDominantExpression(CannabisGenotype genotype, PlantTrait trait)
        {
            // Simplified dominance check - implement based on actual genotype structure
            // This is a placeholder implementation
            return UnityEngine.Random.value > 0.25f; // Roughly 3:1 ratio
        }
        
        /// <summary>
        /// Create a test genotype from a strain.
        /// </summary>
        private CannabisGenotype CreateTestGenotype(PlantStrainSO strain)
        {
            var genotype = new CannabisGenotype();
            genotype.StrainId = strain.StrainName;
            // Additional genotype setup would be implemented here
            return genotype;
        }
        
        /// <summary>
        /// Record a validation result.
        /// </summary>
        private void RecordValidation(ValidationTest validation)
        {
            validation.CompletionTime = DateTime.Now;
            _completedTests.Add(validation);
            _validationResults.ValidationTests.Add(validation);
            
            switch (validation.Result)
            {
                case ValidationResult.Passed:
                    _validationResults.PassedTests++;
                    if (_logDetailedResults)
                        Debug.Log($"✅ {validation.TestName}: {validation.Details}");
                    break;
                case ValidationResult.Failed:
                    _validationResults.FailedTests++;
                    Debug.LogWarning($"❌ {validation.TestName}: {validation.Details}");
                    break;
                case ValidationResult.Error:
                    _validationResults.ErrorTests++;
                    Debug.LogError($"⚠️ {validation.TestName}: {validation.Details}");
                    break;
            }
            
            _validationResults.TotalTests = _validationResults.PassedTests + _validationResults.FailedTests + _validationResults.ErrorTests;
        }
        
        /// <summary>
        /// Generate comprehensive validation report.
        /// </summary>
        private void GenerateValidationReport()
        {
            var duration = _validationResults.ValidationEndTime - _validationResults.ValidationStartTime;
            var successRate = _validationResults.TotalTests > 0 ? 
                (float)_validationResults.PassedTests / _validationResults.TotalTests * 100f : 0f;
            
            Debug.Log($"🔬 === GENETIC VALIDATION REPORT ===");
            Debug.Log($"⏱️ Duration: {duration.TotalSeconds:F1} seconds");
            Debug.Log($"📊 Success Rate: {successRate:F1}% ({_validationResults.PassedTests}/{_validationResults.TotalTests})");
            Debug.Log($"🧬 Scientific Accuracy: {_validationResults.ScientificAccuracyScore:P1}");
            Debug.Log($"📈 Accuracy Consistency: {_validationResults.AccuracyConsistency:P1}");
            
            Debug.Log($"🔬 Scientific Metrics:");
            foreach (var metric in _scientificMetrics)
            {
                Debug.Log($"   {metric.Key}: {metric.Value:F3}");
            }
            
            if (_validationResults.FailedTests > 0 || _validationResults.ErrorTests > 0)
            {
                Debug.Log($"❌ Issues Found:");
                foreach (var test in _validationResults.ValidationTests.Where(t => t.Result != ValidationResult.Passed))
                {
                    Debug.Log($"   - {test.TestName} ({test.Result}): {test.Details}");
                }
            }
            
            // Recommendations
            Debug.Log($"💡 Recommendations:");
            if (_validationResults.ScientificAccuracyScore < 0.8f)
            {
                Debug.Log($"   - Scientific accuracy below 80% - review genetic algorithms");
            }
            if (_scientificMetrics.ContainsKey("PerformanceFPS") && _scientificMetrics["PerformanceFPS"] < _performanceThreshold)
            {
                Debug.Log($"   - Performance below threshold - optimize genetic calculations");
            }
            
            Debug.Log($"✅ === END VALIDATION REPORT ===");
        }
        
        /// <summary>
        /// Public method to run validation manually.
        /// </summary>
        [ContextMenu("Run Genetic Validation")]
        public void RunValidationManually()
        {
            StartCoroutine(RunGeneticValidation());
        }
        
        /// <summary>
        /// Get validation results.
        /// </summary>
        public GeneticValidationResults GetValidationResults()
        {
            return _validationResults;
        }
        
        /// <summary>
        /// Get scientific metrics.
        /// </summary>
        public Dictionary<string, float> GetScientificMetrics()
        {
            return new Dictionary<string, float>(_scientificMetrics);
        }
    }
    
    /// <summary>
    /// Container for genetic validation results.
    /// </summary>
    [System.Serializable]
    public class GeneticValidationResults
    {
        public DateTime ValidationStartTime;
        public DateTime ValidationEndTime;
        public int PassedTests;
        public int FailedTests;
        public int ErrorTests;
        public int TotalTests;
        public float ScientificAccuracyScore;
        public float AccuracyConsistency;
        public List<ValidationTest> ValidationTests = new List<ValidationTest>();
        
        public TimeSpan Duration => ValidationEndTime - ValidationStartTime;
        public float SuccessRate => TotalTests > 0 ? (float)PassedTests / TotalTests : 0f;
    }
    
    /// <summary>
    /// Individual validation test result.
    /// </summary>
    [System.Serializable]
    public class ValidationTest
    {
        public string TestName;
        public ValidationResult Result;
        public string Details;
        public float ScientificAccuracy;
        public DateTime CompletionTime;
        
        public ValidationTest(string testName)
        {
            TestName = testName;
            Result = ValidationResult.Pending;
            Details = "";
            ScientificAccuracy = 0f;
            CompletionTime = DateTime.Now;
        }
    }
    
    /// <summary>
    /// Validation test result types.
    /// </summary>
    public enum ValidationResult
    {
        Pending,
        Passed,
        Failed,
        Error
    }
}